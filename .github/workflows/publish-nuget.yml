name: ci-default

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: read

env:
  PROJECT_PATH: src/UNIR.TFE.Polyrepo.Shared/UNIR.TFE.Polyrepo.Shared.csproj
  TEST_PATH: test/UNIR.TFE.Polyrepo.Shared.Test/UNIR.TFE.Polyrepo.Shared.Test.csproj
  BASE_VERSION: "0.0"

jobs:
  build_test_pack:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Determine package version
        id: ver
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
            echo "RELEASE_KIND=tag" >> $GITHUB_ENV
          else
            VERSION="${BASE_VERSION}.${GITHUB_RUN_NUMBER}"
            echo "RELEASE_KIND=ci" >> $GITHUB_ENV
          fi
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version => ${VERSION}"

      - name: Restore
        run: |
          dotnet restore $PROJECT_PATH
          dotnet restore $TEST_PATH

      - name: Create coverlet runsettings
        run: |
          cat > coverlet.runsettings <<'XML'
          <?xml version="1.0" encoding="utf-8"?>
          <RunSettings>
            <DataCollectionRunSettings>
              <DataCollectors>
                <DataCollector friendlyName="XPlat Code Coverage">
                  <Configuration>
                    <Format>cobertura</Format>
                    <Include>[UNIR.TFE.Polyrepo.Shared*]*</Include>
                    <ExcludeByAttribute>CompilerGeneratedAttribute,GeneratedCodeAttribute</ExcludeByAttribute>
                  </Configuration>
                </DataCollector>
              </DataCollectors>
            </DataCollectionRunSettings>
          </RunSettings>
          XML

      - name: Test (unit tests + coverage)
        run: |
          dotnet test $TEST_PATH -c Release \
            --logger "trx;LogFileName=test-results.trx" \
            --results-directory ./test-results \
            --settings coverlet.runsettings

      # Cobertura → Summary + HTML
      - name: Generate coverage summary
        if: always()
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        with:
          reports: 'test-results/**/coverage.cobertura.xml;**/TestResults/**/coverage.cobertura.xml'
          targetdir: 'coveragereport'
          reporttypes: 'MarkdownSummary;HtmlInline_AzurePipelines'
          assemblyfilters: '+UNIR.TFE.Polyrepo.Shared*'
          title: 'UNIR.TFE.Polyrepo.Shared – Coverage'

      - name: Add coverage to Job Summary
        if: always()
        run: |
          echo "## Code Coverage" >> $GITHUB_STEP_SUMMARY
          cat coveragereport/Summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coveragereport

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ./test-results
            **/TestResults/**/*.trx
            **/TestResults/**/coverage.cobertura.xml

      # Empaquetado (no publica)
      - name: Pack
        run: |
          dotnet pack $PROJECT_PATH -c Release -o ./artifacts \
            /p:Version=$PACKAGE_VERSION /p:PackageVersion=$PACKAGE_VERSION

      # Publica el paquete como artefacto para CD
      - name: Upload NuGet package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: artifacts/*.nupkg
          if-no-files-found: error
