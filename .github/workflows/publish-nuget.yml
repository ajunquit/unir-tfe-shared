name: publish-nuget
on:
  push:
    branches: [main]     # Auto-versionado en CI
    tags: ['v*']         # Releases estables por tag (v1.2.3)
  workflow_dispatch: # Para lanzar manualmente

permissions:
  contents: read
  packages: write   # necesario para publicar a GitHub Packages

env:
  PROJECT_PATH: src/UNIR.TFE.Polyrepo.Shared/UNIR.TFE.Polyrepo.Shared.csproj
  TEST_PATH: test/UNIR.TFE.Polyrepo.Shared.Test/UNIR.TFE.Polyrepo.Shared.Test.csproj
  BASE_VERSION: 0.0.0

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Determine package version
        id: ver
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            # Caso 1: release estable por tag vX.Y.Z
            VERSION="${GITHUB_REF_NAME#v}"
            echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
            echo "RELEASE_KIND=tag" >> $GITHUB_ENV
          else
            # Caso 2: auto-versionado en CI (main)
            # Resultado: X.Y.<run_number>  (ej. 0.0.57)
            VERSION="${BASE_VERSION}.${GITHUB_RUN_NUMBER}"
            echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
            echo "RELEASE_KIND=ci" >> $GITHUB_ENV
          fi
          echo "Version => ${VERSION}"

      - name: Restore
        run: |
          dotnet restore $PROJECT_PATH
          dotnet restore $TEST_PATH

      - name: Test (unit tests + coverage)
        run: |
          dotnet test $TEST_PATH -c Release \
            --logger "trx;LogFileName=test-results.trx" \
            --results-directory ./test-results \
            --collect:"XPlat Code Coverage"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ./test-results
            **/TestResults/**/*.trx
            **/TestResults/**/*.xml
            
      - name: Pack
        run: |
          dotnet pack $PROJECT_PATH -c Release -o ./artifacts \
            /p:Version=$PACKAGE_VERSION /p:PackageVersion=$PACKAGE_VERSION

      - name: Add GitHub Packages source
        run: |
          dotnet nuget add source \
            --username ${{ github.actor }} \
            --password ${{ secrets.GITHUB_TOKEN }} \
            --store-password-in-clear-text \
            --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: Publish to GitHub Packages
        run: dotnet nuget push "./artifacts/*.nupkg" --source "github" --skip-duplicate
