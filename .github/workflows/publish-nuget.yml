name: publish-nuget
on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  PROJECT_PATH: src/UNIR.TFE.Polyrepo.Shared/UNIR.TFE.Polyrepo.Shared.csproj
  TEST_PATH: test/UNIR.TFE.Polyrepo.Shared.Test/UNIR.TFE.Polyrepo.Shared.Test.csproj
  BASE_VERSION: "0.0"

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Determine package version
        id: ver
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF_NAME#v}"; echo "RELEASE_KIND=tag" >> $GITHUB_ENV
          else
            VERSION="${BASE_VERSION}.${GITHUB_RUN_NUMBER}"; echo "RELEASE_KIND=ci" >> $GITHUB_ENV
          fi
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version => ${VERSION}"

      - name: Restore
        run: |
          dotnet restore $PROJECT_PATH
          dotnet restore $TEST_PATH

      # Asegura que el collector esté presente (evita reportes vacíos)
      - name: Ensure coverlet.collector in test project
        run: |
          dotnet add $TEST_PATH package coverlet.collector --version 6.0.0
          dotnet add $TEST_PATH package Microsoft.NET.Test.Sdk --version 17.10.0

      - name: Test (unit tests + coverage)
        run: |
          dotnet test $TEST_PATH -c Release \
            --logger "trx;LogFileName=test-results.trx" \
            --results-directory ./test-results \
            --collect:"XPlat Code Coverage"

      # Diagnóstico: qué coverage files se generaron
      - name: Inspect coverage files
        run: |
          echo "Coverage files found:"
          find . -type f -name "coverage.cobertura.xml" -print -exec du -h {} \; || true
          echo "Sample head:"
          head -n 40 $(find . -type f -name "coverage.cobertura.xml" | head -n 1) || true

      # Resumen de cobertura + HTML
      - name: Generate coverage summary
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        with:
          reports: 'test-results/**/coverage.cobertura.xml;**/TestResults/**/coverage.cobertura.xml'
          targetdir: 'coveragereport'
          reporttypes: 'MarkdownSummary;HtmlInline_AzurePipelines'
          # Opcional: enfoca el assembly de Shared para evitar “0 módulos” por mezclar reportes vacíos
          assemblyfilters: '+UNIR.TFE.Polyrepo.Shared*'

      - name: Add coverage to Job Summary
        run: |
          echo "## Code Coverage" >> $GITHUB_STEP_SUMMARY
          cat coveragereport/Summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coveragereport

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ./test-results
            **/TestResults/**/*.trx
            **/TestResults/**/coverage.cobertura.xml

      - name: Pack
        run: |
          dotnet pack $PROJECT_PATH -c Release -o ./artifacts \
            /p:Version=$PACKAGE_VERSION /p:PackageVersion=$PACKAGE_VERSION

      - name: Add GitHub Packages source
        run: |
          dotnet nuget add source \
            --username ${{ github.actor }} \
            --password ${{ secrets.GITHUB_TOKEN }} \
            --store-password-in-clear-text \
            --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: Publish to GitHub Packages
        run: dotnet nuget push "./artifacts/*.nupkg" --source "github" --skip-duplicate
